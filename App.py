# -*- coding: utf-8 -*-
"""
App.py - ·ª®ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh v·ªõi giao di·ªán GUI
C√°c ch·ª©c nƒÉng: L√†m m·ªù, L√†m s√°ng, L√†m t·ªëi
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import cv2
import numpy as np
from Components import Blur, Brightness


class ImageEditorApp:
    """Class qu·∫£n l√Ω giao di·ªán ·ª©ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("·ª®ng D·ª•ng Ch·ªânh S·ª≠a ·∫¢nh - Nh√≥m 4")
        
        # Responsive window size
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        window_width = min(1200, int(screen_width * 0.8))
        window_height = min(800, int(screen_height * 0.85))
        
        # Center window
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.configure(bg="#f0f0f0")
        self.root.minsize(900, 600)
        
        # Bi·∫øn l∆∞u tr·ªØ ·∫£nh
        self.original_image = None
        self.current_image = None
        self.display_image = None
        self.image_path = None
        
        # L∆∞u l·ªãch s·ª≠ ƒë·ªÉ undo
        self.history = []
        
        # Status message
        self.status_message = ""
        
        # Tr·∫°ng th√°i collapse c·ªßa c√°c section
        self.blur_collapsed = True
        self.brightness_collapsed = True
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        
        # === HEADER ===
        header_frame = tk.Frame(self.root, bg="#2c3e50", height=80)
        header_frame.pack(fill=tk.X, side=tk.TOP)
        
        title_label = tk.Label(
            header_frame, 
            text="üé® ·ª®NG D·ª§NG CH·ªàNH S·ª¨A ·∫¢NH", 
            font=("Arial", 24, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        title_label.pack(pady=20)
        
        # === MAIN CONTAINER ===
        main_container = tk.Frame(self.root, bg="#f0f0f0")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # === LEFT PANEL - Buttons ===
        left_panel = tk.Frame(main_container, bg="white", width=320, relief=tk.RAISED, borderwidth=2)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # T·∫°o scrollable frame cho buttons
        canvas = tk.Canvas(left_panel, bg="white", highlightthickness=0)
        scrollbar = ttk.Scrollbar(left_panel, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="white")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # === BUTTON CH·ªåN ·∫¢NH ===
        self.create_button(
            scrollable_frame,
            text="üìÅ Ch·ªçn ·∫¢nh",
            command=self.load_image,
            bg="#3498db",
            font_size=13,
            bold=True,
            pady_top=15
        )
        
        self.create_separator(scrollable_frame)
        
        # === NH√ìM L√ÄM M·ªú (COLLAPSIBLE) ===
        self.blur_frame = self.create_collapsible_section(
            scrollable_frame,
            "üå´Ô∏è L√ÄM M·ªú ·∫¢NH",
            [
                ("L√†m M·ªù Trung B√¨nh", self.apply_average_blur, "#9b59b6"),
                ("L√†m M·ªù Gaussian", self.apply_gaussian_blur, "#8e44ad"),
                ("L√†m M·ªù Trung V·ªã", self.apply_median_blur, "#7d3c98"),
                ("L√†m M·ªù Bilateral", self.apply_bilateral_blur, "#6c3483"),
            ],
            "blur"
        )
        
        # === NH√ìM ƒê·ªò S√ÅNG (COLLAPSIBLE) ===
        self.brightness_frame = self.create_collapsible_section(
            scrollable_frame,
            "üí° ƒê·ªò S√ÅNG",
            [
                ("L√†m S√°ng ·∫¢nh", self.increase_brightness, "#f39c12"),
                ("L√†m T·ªëi ·∫¢nh", self.decrease_brightness, "#e67e22"),
                ("TƒÉng T∆∞∆°ng Ph·∫£n", self.increase_contrast, "#d68910"),
            ],
            "brightness"
        )
        
        self.create_separator(scrollable_frame)
        
        # === N√öT ƒêI·ªÄU KHI·ªÇN ===
        control_frame = tk.Frame(scrollable_frame, bg="white")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # Reset button
        reset_color = "#e74c3c"
        reset_btn = tk.Button(
            control_frame,
            text="üîÑ Reset",
            command=self.reset_image,
            font=("Arial", 11, "bold"),
            bg=reset_color,
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            width=14,
            activebackground=self.darken_color(reset_color)
        )
        reset_btn.pack(side=tk.LEFT, padx=5, pady=5)
        reset_btn.bind("<Enter>", lambda e: reset_btn.config(bg=self.lighten_color(reset_color)))
        reset_btn.bind("<Leave>", lambda e: reset_btn.config(bg=reset_color))
        
        # Save button
        save_color = "#27ae60"
        save_btn = tk.Button(
            control_frame,
            text="üíæ L∆∞u",
            command=self.save_image,
            font=("Arial", 11, "bold"),
            bg=save_color,
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            width=14,
            activebackground=self.darken_color(save_color)
        )
        save_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        save_btn.bind("<Enter>", lambda e: save_btn.config(bg=self.lighten_color(save_color)))
        save_btn.bind("<Leave>", lambda e: save_btn.config(bg=save_color))
        
        # === RIGHT PANEL - Image Display ===
        right_panel = tk.Frame(main_container, bg="white", relief=tk.RAISED, borderwidth=2)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = tk.Label(
            right_panel,
            text="Ch∆∞a c√≥ ·∫£nh\n\nüì∑\n\nVui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu",
            font=("Arial", 16),
            bg="white",
            fg="#95a5a6"
        )
        self.image_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)
        
        # === STATUS BAR ===
        status_frame = tk.Frame(self.root, bg="#34495e", height=35)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_label = tk.Label(
            status_frame,
            text="S·∫µn s√†ng - Vui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu",
            font=("Arial", 10),
            bg="#34495e",
            fg="white",
            anchor="w"
        )
        self.status_label.pack(side=tk.LEFT, padx=20, pady=8)
    
    def create_button(self, parent, text, command, bg, font_size=11, bold=False, pady_top=5):
        """Helper method ƒë·ªÉ t·∫°o button d·ªÖ d√†ng"""
        font_style = ("Arial", font_size, "bold" if bold else "normal")
        btn = tk.Button(
            parent,
            text=text,
            command=command,
            font=font_style,
            bg=bg,
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            height=2,
            activebackground=self.darken_color(bg),
            activeforeground="white"
        )
        btn.pack(fill=tk.X, padx=15, pady=(pady_top, 5))
        
        # Hover effect
        btn.bind("<Enter>", lambda e: btn.config(bg=self.lighten_color(bg)))
        btn.bind("<Leave>", lambda e: btn.config(bg=bg))
        
        return btn
    
    def lighten_color(self, hex_color):
        """L√†m s√°ng m√†u l√™n m·ªôt ch√∫t"""
        hex_color = hex_color.lstrip('#')
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        r = min(255, int(r * 1.1))
        g = min(255, int(g * 1.1))
        b = min(255, int(b * 1.1))
        return f'#{r:02x}{g:02x}{b:02x}'
    
    def darken_color(self, hex_color):
        """L√†m t·ªëi m√†u xu·ªëng m·ªôt ch√∫t"""
        hex_color = hex_color.lstrip('#')
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        r = max(0, int(r * 0.8))
        g = max(0, int(g * 0.8))
        b = max(0, int(b * 0.8))
        return f'#{r:02x}{g:02x}{b:02x}'
    
    def create_separator(self, parent):
        """Helper method ƒë·ªÉ t·∫°o separator"""
        separator = ttk.Separator(parent, orient='horizontal')
        separator.pack(fill=tk.X, padx=15, pady=10)
        return separator
    
    def create_section_label(self, parent, text):
        """Helper method ƒë·ªÉ t·∫°o section label"""
        label = tk.Label(
            parent,
            text=text,
            font=("Arial", 12, "bold"),
            bg="white",
            fg="#2c3e50"
        )
        label.pack(pady=(10, 5))
        return label
    
    def create_collapsible_section(self, parent, title, buttons, section_name):
        """T·∫°o section c√≥ th·ªÉ thu g·ªçn/m·ªü r·ªông"""
        # Container cho to√†n b·ªô section
        section_container = tk.Frame(parent, bg="white")
        section_container.pack(fill=tk.X, padx=10, pady=5)
        
        # Header c√≥ th·ªÉ click
        header_frame = tk.Frame(section_container, bg="#ecf0f1", relief=tk.RAISED, borderwidth=1)
        header_frame.pack(fill=tk.X)
        
        # Icon v√† title
        arrow = "‚ñº" if getattr(self, f"{section_name}_collapsed") else "‚ñ∂"
        header_btn = tk.Button(
            header_frame,
            text=f"{arrow} {title}",
            command=lambda: self.toggle_section(section_name, content_frame, header_btn, title),
            font=("Arial", 11, "bold"),
            bg="#ecf0f1",
            fg="#2c3e50",
            relief=tk.FLAT,
            cursor="hand2",
            anchor="w",
            padx=10
        )
        header_btn.pack(fill=tk.X, pady=5)
        
        # Content frame (ch·ª©a c√°c button)
        content_frame = tk.Frame(section_container, bg="white")
        if not getattr(self, f"{section_name}_collapsed"):
            content_frame.pack(fill=tk.X, pady=5)
        
        # T·∫°o c√°c button
        for text, command, color in buttons:
            btn = tk.Button(
                content_frame,
                text=text,
                command=command,
                font=("Arial", 10),
                bg=color,
                fg="white",
                relief=tk.FLAT,
                cursor="hand2",
                height=1,
                activebackground=self.darken_color(color),
                activeforeground="white"
            )
            btn.pack(fill=tk.X, padx=5, pady=2)
            
            # Hover effect
            btn.bind("<Enter>", lambda e, b=btn, c=color: b.config(bg=self.lighten_color(c)))
            btn.bind("<Leave>", lambda e, b=btn, c=color: b.config(bg=c))
        
        return content_frame
    
    def toggle_section(self, section_name, content_frame, header_btn, title):
        """Toggle hi·ªÉn th·ªã/·∫©n section"""
        is_collapsed = getattr(self, f"{section_name}_collapsed")
        
        if is_collapsed:
            # M·ªü r·ªông
            content_frame.pack(fill=tk.X, pady=5)
            header_btn.config(text=f"‚ñº {title}")
            setattr(self, f"{section_name}_collapsed", False)
        else:
            # Thu g·ªçn
            content_frame.pack_forget()
            header_btn.config(text=f"‚ñ∂ {title}")
            setattr(self, f"{section_name}_collapsed", True)
    
    def save_to_history(self):
        """L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o history"""
        if self.current_image is not None:
            # Gi·ªõi h·∫°n history ·ªü 10 b∆∞·ªõc
            if len(self.history) >= 10:
                self.history.pop(0)
            self.history.append(self.current_image.copy())
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t status bar"""
        self.status_label.config(text=message)
        self.root.update_idletasks()
    
    def load_image(self):
        """Ch·ªçn v√† t·∫£i ·∫£nh t·ª´ file"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                # ƒê·ªçc ·∫£nh b·∫±ng OpenCV
                self.original_image = cv2.imread(file_path)
                if self.original_image is None:
                    raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
                
                self.current_image = self.original_image.copy()
                self.image_path = file_path
                self.history.clear()
                
                # Hi·ªÉn th·ªã ·∫£nh
                self.display_current_image()
                self.update_status(f"‚úì ƒê√£ t·∫£i ·∫£nh: {file_path.split('/')[-1]}")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh: {str(e)}")
    
    def display_current_image(self):
        """Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i l√™n giao di·ªán"""
        if self.current_image is None:
            return
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB
        image_rgb = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2RGB)
        
        # Resize ·∫£nh ƒë·ªÉ v·ª´a v·ªõi khung hi·ªÉn th·ªã
        display_width = 850
        display_height = 650
        
        h, w = image_rgb.shape[:2]
        aspect_ratio = w / h
        
        if w > display_width or h > display_height:
            if aspect_ratio > 1:
                new_width = display_width
                new_height = int(display_width / aspect_ratio)
            else:
                new_height = display_height
                new_width = int(display_height * aspect_ratio)
            
            image_rgb = cv2.resize(image_rgb, (new_width, new_height))
        
        # Chuy·ªÉn sang PIL Image
        pil_image = Image.fromarray(image_rgb)
        
        # Chuy·ªÉn sang PhotoImage
        self.display_image = ImageTk.PhotoImage(pil_image)
        
        # C·∫≠p nh·∫≠t label
        self.image_label.configure(image=self.display_image, text="")
        self.image_label.image = self.display_image
    
    def check_image_loaded(self):
        """Ki·ªÉm tra xem ƒë√£ t·∫£i ·∫£nh ch∆∞a"""
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return False
        return True
    
    # === C√ÅC H√ÄM X·ª¨ L√ù L√ÄM M·ªú ===
    
    def apply_average_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung b√¨nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_average_blur(self.current_image, kernel_size=(15, 15))
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung b√¨nh")
    
    def apply_gaussian_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Gaussian"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_gaussian_blur(self.current_image, kernel_size=(15, 15), sigma=3)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Gaussian")
    
    def apply_median_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung v·ªã"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_median_blur(self.current_image, kernel_size=15)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung v·ªã")
    
    def apply_bilateral_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Bilateral"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_bilateral_blur(self.current_image, d=15, sigma_color=80, sigma_space=80)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Bilateral")
    
    # === C√ÅC H√ÄM X·ª¨ L√ù ƒê·ªò S√ÅNG ===
    
    def increase_brightness(self):
        """L√†m s√°ng ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.increase_brightness(self.current_image, value=50)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ l√†m s√°ng ·∫£nh")
    
    def decrease_brightness(self):
        """L√†m t·ªëi ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.decrease_brightness(self.current_image, value=50)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ l√†m t·ªëi ·∫£nh")
    
    def increase_contrast(self):
        """TƒÉng t∆∞∆°ng ph·∫£n"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.adjust_contrast_brightness(self.current_image, alpha=1.5, beta=0)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ tƒÉng t∆∞∆°ng ph·∫£n")
    
    # === C√ÅC H√ÄM KH√ÅC ===
    
    def reset_image(self):
        """Kh√¥i ph·ª•c ·∫£nh g·ªëc"""
        if not self.check_image_loaded():
            return
        
        self.history.clear()
        self.current_image = self.original_image.copy()
        self.display_current_image()
        self.update_status("üîÑ ƒê√£ reset v·ªÅ ·∫£nh g·ªëc")
    
    def save_image(self):
        """L∆∞u ·∫£nh ƒë√£ ch·ªânh s·ª≠a"""
        if not self.check_image_loaded():
            return
        
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u ·∫£nh",
            defaultextension=".jpg",
            filetypes=[
                ("JPEG", "*.jpg"),
                ("PNG", "*.png"),
                ("BMP", "*.bmp"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                cv2.imwrite(file_path, self.current_image)
                self.update_status(f"üíæ ƒê√£ l∆∞u ·∫£nh: {file_path.split('/')[-1]}")
            except Exception as e:
                self.update_status(f"‚ùå L·ªói: {str(e)}")


def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = ImageEditorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
