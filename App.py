# -*- coding: utf-8 -*-
"""
App.py - ·ª®ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh v·ªõi giao di·ªán GUI
C√°c ch·ª©c nƒÉng: L√†m m·ªù, L√†m s√°ng, L√†m t·ªëi
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import cv2
import numpy as np
from Components import Blur, Brightness


class ImageEditorApp:
    """Class qu·∫£n l√Ω giao di·ªán ·ª©ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("·ª®ng D·ª•ng Ch·ªânh S·ª≠a ·∫¢nh - Nh√≥m 4")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f0f0")
        
        # Bi·∫øn l∆∞u tr·ªØ ·∫£nh
        self.original_image = None
        self.current_image = None
        self.display_image = None
        self.image_path = None
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        
        # === HEADER ===
        header_frame = tk.Frame(self.root, bg="#2c3e50", height=80)
        header_frame.pack(fill=tk.X, side=tk.TOP)
        
        title_label = tk.Label(
            header_frame, 
            text="üé® ·ª®NG D·ª§NG CH·ªàNH S·ª¨A ·∫¢NH", 
            font=("Arial", 24, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        title_label.pack(pady=20)
        
        # === MAIN CONTAINER ===
        main_container = tk.Frame(self.root, bg="#f0f0f0")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # === LEFT PANEL - Buttons ===
        left_panel = tk.Frame(main_container, bg="white", width=300, relief=tk.RAISED, borderwidth=2)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # Button ch·ªçn ·∫£nh
        btn_load = tk.Button(
            left_panel,
            text="üìÅ Ch·ªçn ·∫¢nh",
            command=self.load_image,
            font=("Arial", 14, "bold"),
            bg="#3498db",
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            height=2
        )
        btn_load.pack(fill=tk.X, padx=15, pady=(20, 10))
        
        # Separator
        separator1 = ttk.Separator(left_panel, orient='horizontal')
        separator1.pack(fill=tk.X, padx=15, pady=10)
        
        # === NH√ìM L√ÄM M·ªú ===
        blur_label = tk.Label(
            left_panel,
            text="üå´Ô∏è L√ÄM M·ªú ·∫¢NH",
            font=("Arial", 12, "bold"),
            bg="white",
            fg="#2c3e50"
        )
        blur_label.pack(pady=(10, 5))
        
        blur_buttons = [
            ("L√†m M·ªù Trung B√¨nh", self.apply_average_blur, "#9b59b6"),
            ("L√†m M·ªù Gaussian", self.apply_gaussian_blur, "#8e44ad"),
            ("L√†m M·ªù Trung V·ªã", self.apply_median_blur, "#7d3c98"),
            ("L√†m M·ªù Bilateral", self.apply_bilateral_blur, "#6c3483"),
        ]
        
        for text, command, color in blur_buttons:
            btn = tk.Button(
                left_panel,
                text=text,
                command=command,
                font=("Arial", 11),
                bg=color,
                fg="white",
                relief=tk.FLAT,
                cursor="hand2",
                height=2
            )
            btn.pack(fill=tk.X, padx=15, pady=5)
        
        # Separator
        separator2 = ttk.Separator(left_panel, orient='horizontal')
        separator2.pack(fill=tk.X, padx=15, pady=10)
        
        # === NH√ìM ƒê·ªò S√ÅNG ===
        brightness_label = tk.Label(
            left_panel,
            text="üí° ƒê·ªò S√ÅNG",
            font=("Arial", 12, "bold"),
            bg="white",
            fg="#2c3e50"
        )
        brightness_label.pack(pady=(10, 5))
        
        brightness_buttons = [
            ("L√†m S√°ng ·∫¢nh", self.increase_brightness, "#f39c12"),
            ("L√†m T·ªëi ·∫¢nh", self.decrease_brightness, "#e67e22"),
            ("TƒÉng T∆∞∆°ng Ph·∫£n", self.increase_contrast, "#d68910"),
        ]
        
        for text, command, color in brightness_buttons:
            btn = tk.Button(
                left_panel,
                text=text,
                command=command,
                font=("Arial", 11),
                bg=color,
                fg="white",
                relief=tk.FLAT,
                cursor="hand2",
                height=2
            )
            btn.pack(fill=tk.X, padx=15, pady=5)
        
        # Separator
        separator3 = ttk.Separator(left_panel, orient='horizontal')
        separator3.pack(fill=tk.X, padx=15, pady=10)
        
        # === NH√ìM KH√ÅC ===
        other_buttons = [
            ("üîÑ Kh√¥i Ph·ª•c ·∫¢nh G·ªëc", self.reset_image, "#27ae60"),
            ("üíæ L∆∞u ·∫¢nh", self.save_image, "#16a085"),
        ]
        
        for text, command, color in other_buttons:
            btn = tk.Button(
                left_panel,
                text=text,
                command=command,
                font=("Arial", 11, "bold"),
                bg=color,
                fg="white",
                relief=tk.FLAT,
                cursor="hand2",
                height=2
            )
            btn.pack(fill=tk.X, padx=15, pady=5)
        
        # === RIGHT PANEL - Image Display ===
        right_panel = tk.Frame(main_container, bg="white", relief=tk.RAISED, borderwidth=2)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = tk.Label(
            right_panel,
            text="Ch∆∞a c√≥ ·∫£nh\n\nüì∑\n\nVui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu",
            font=("Arial", 16),
            bg="white",
            fg="#95a5a6"
        )
        self.image_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)
        
        # === FOOTER ===
        footer_frame = tk.Frame(self.root, bg="#34495e", height=40)
        footer_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        footer_label = tk.Label(
            footer_frame,
            text="¬© 2024 ·ª®ng D·ª•ng Ch·ªânh S·ª≠a ·∫¢nh - Nh√≥m 4",
            font=("Arial", 10),
            bg="#34495e",
            fg="white"
        )
        footer_label.pack(pady=10)
    
    def load_image(self):
        """Ch·ªçn v√† t·∫£i ·∫£nh t·ª´ file"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                # ƒê·ªçc ·∫£nh b·∫±ng OpenCV
                self.original_image = cv2.imread(file_path)
                if self.original_image is None:
                    raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
                
                self.current_image = self.original_image.copy()
                self.image_path = file_path
                
                # Hi·ªÉn th·ªã ·∫£nh
                self.display_current_image()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫£i ·∫£nh th√†nh c√¥ng!")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh: {str(e)}")
    
    def display_current_image(self):
        """Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i l√™n giao di·ªán"""
        if self.current_image is None:
            return
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB
        image_rgb = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2RGB)
        
        # Resize ·∫£nh ƒë·ªÉ v·ª´a v·ªõi khung hi·ªÉn th·ªã
        display_width = 850
        display_height = 650
        
        h, w = image_rgb.shape[:2]
        aspect_ratio = w / h
        
        if w > display_width or h > display_height:
            if aspect_ratio > 1:
                new_width = display_width
                new_height = int(display_width / aspect_ratio)
            else:
                new_height = display_height
                new_width = int(display_height * aspect_ratio)
            
            image_rgb = cv2.resize(image_rgb, (new_width, new_height))
        
        # Chuy·ªÉn sang PIL Image
        pil_image = Image.fromarray(image_rgb)
        
        # Chuy·ªÉn sang PhotoImage
        self.display_image = ImageTk.PhotoImage(pil_image)
        
        # C·∫≠p nh·∫≠t label
        self.image_label.configure(image=self.display_image, text="")
        self.image_label.image = self.display_image
    
    def check_image_loaded(self):
        """Ki·ªÉm tra xem ƒë√£ t·∫£i ·∫£nh ch∆∞a"""
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return False
        return True
    
    # === C√ÅC H√ÄM X·ª¨ L√ù L√ÄM M·ªú ===
    
    def apply_average_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung b√¨nh"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Blur.apply_average_blur(self.current_image, kernel_size=(15, 15))
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng l√†m m·ªù trung b√¨nh!")
    
    def apply_gaussian_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Gaussian"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Blur.apply_gaussian_blur(self.current_image, kernel_size=(15, 15), sigma=3)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng l√†m m·ªù Gaussian!")
    
    def apply_median_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung v·ªã"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Blur.apply_median_blur(self.current_image, kernel_size=15)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng l√†m m·ªù trung v·ªã!")
    
    def apply_bilateral_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Bilateral"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Blur.apply_bilateral_blur(self.current_image, d=15, sigma_color=80, sigma_space=80)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng l√†m m·ªù Bilateral!")
    
    # === C√ÅC H√ÄM X·ª¨ L√ù ƒê·ªò S√ÅNG ===
    
    def increase_brightness(self):
        """L√†m s√°ng ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Brightness.increase_brightness(self.current_image, value=50)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l√†m s√°ng ·∫£nh!")
    
    def decrease_brightness(self):
        """L√†m t·ªëi ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Brightness.decrease_brightness(self.current_image, value=50)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l√†m t·ªëi ·∫£nh!")
    
    def increase_contrast(self):
        """TƒÉng t∆∞∆°ng ph·∫£n"""
        if not self.check_image_loaded():
            return
        
        self.current_image = Brightness.adjust_contrast_brightness(self.current_image, alpha=1.5, beta=0)
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ tƒÉng t∆∞∆°ng ph·∫£n!")
    
    # === C√ÅC H√ÄM KH√ÅC ===
    
    def reset_image(self):
        """Kh√¥i ph·ª•c ·∫£nh g·ªëc"""
        if not self.check_image_loaded():
            return
        
        self.current_image = self.original_image.copy()
        self.display_current_image()
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ kh√¥i ph·ª•c ·∫£nh g·ªëc!")
    
    def save_image(self):
        """L∆∞u ·∫£nh ƒë√£ ch·ªânh s·ª≠a"""
        if not self.check_image_loaded():
            return
        
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u ·∫£nh",
            defaultextension=".jpg",
            filetypes=[
                ("JPEG", "*.jpg"),
                ("PNG", "*.png"),
                ("BMP", "*.bmp"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                cv2.imwrite(file_path, self.current_image)
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u ·∫£nh t·∫°i:\n{file_path}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ·∫£nh: {str(e)}")


def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = ImageEditorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
