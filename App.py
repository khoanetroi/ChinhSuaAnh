# -*- coding: utf-8 -*-
"""
App.py - ·ª®ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh v·ªõi giao di·ªán GUI
C√°c ch·ª©c nƒÉng: L√†m m·ªù, L√†m s√°ng, L√†m t·ªëi
"""

import tkinter as tk
from tkinter import messagebox
from Components import Blur, Brightness, ImageHandler
from Components.UI import Button, Section, Layout, Colors


class ImageEditorApp:
    """Class qu·∫£n l√Ω giao di·ªán ·ª©ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh"""
    
    def __init__(self, root):
        self.root = root
        
        # Thi·∫øt l·∫≠p c·ª≠a s·ªï
        Layout.setup_window(self.root, "·ª®ng D·ª•ng Ch·ªânh S·ª≠a ·∫¢nh - Nh√≥m 4")
        
        # Bi·∫øn l∆∞u tr·ªØ ·∫£nh
        self.original_image = None
        self.current_image = None
        self.display_image = None
        self.image_path = None
        
        # L∆∞u l·ªãch s·ª≠ ƒë·ªÉ undo
        self.history = ImageHandler.ImageHistory(max_history=10)
        
        # Status message
        self.status_message = ""
        
        # Tr·∫°ng th√°i collapse c·ªßa c√°c section
        self.blur_collapsed = True
        self.brightness_collapsed = True
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        
        # === HEADER ===
        Layout.create_header(self.root)
        
        # === MAIN CONTAINER ===
        main_container = Layout.create_main_container(self.root)
        
        # === LEFT PANEL - Buttons ===
        left_panel = Layout.create_left_panel(main_container)
        
        # T·∫°o scrollable frame cho buttons
        scrollable_frame = Layout.create_scrollable_frame(left_panel)
        
        # === BUTTON CH·ªåN ·∫¢NH ===
        Button.create_button(
            scrollable_frame,
            text="üìÅ Ch·ªçn ·∫¢nh",
            command=self.load_image,
            bg=Colors.get_color('primary'),
            font_size=13,
            bold=True,
            pady_top=15
        )
        
        Section.create_separator(scrollable_frame)
        
        # === NH√ìM L√ÄM M·ªú (COLLAPSIBLE) ===
        self.blur_frame = Section.create_collapsible_section(
            scrollable_frame,
            "üå´Ô∏è L√ÄM M·ªú ·∫¢NH",
            [
                ("L√†m M·ªù Trung B√¨nh", self.apply_average_blur, Colors.get_color('blur_1')),
                ("L√†m M·ªù Gaussian", self.apply_gaussian_blur, Colors.get_color('blur_2')),
                ("L√†m M·ªù Trung V·ªã", self.apply_median_blur, Colors.get_color('blur_3')),
                ("L√†m M·ªù Bilateral", self.apply_bilateral_blur, Colors.get_color('blur_4')),
            ],
            "blur",
            self
        )
        
        # === NH√ìM ƒê·ªò S√ÅNG (COLLAPSIBLE) ===
        self.brightness_frame = Section.create_collapsible_section(
            scrollable_frame,
            "üí° ƒê·ªò S√ÅNG",
            [
                ("L√†m S√°ng ·∫¢nh", self.increase_brightness, Colors.get_color('bright_1')),
                ("L√†m T·ªëi ·∫¢nh", self.decrease_brightness, Colors.get_color('bright_2')),
                ("TƒÉng T∆∞∆°ng Ph·∫£n", self.increase_contrast, Colors.get_color('bright_3')),
            ],
            "brightness",
            self
        )
        
        Section.create_separator(scrollable_frame)
        
        # === N√öT ƒêI·ªÄU KHI·ªÇN ===
        control_frame = Layout.create_control_frame(scrollable_frame)
        
        # Reset button
        reset_btn = Button.create_control_button(
            control_frame,
            text="üîÑ Reset",
            command=self.reset_image,
            bg=Colors.get_color('danger')
        )
        reset_btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # Save button
        save_btn = Button.create_control_button(
            control_frame,
            text="üíæ L∆∞u",
            command=self.save_image,
            bg=Colors.get_color('success')
        )
        save_btn.pack(side=tk.RIGHT, padx=5, pady=5)
        
        # === RIGHT PANEL - Image Display ===
        right_panel = Layout.create_right_panel(main_container)
        
        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = Layout.create_image_label(right_panel)
        
        # === STATUS BAR ===
        self.status_label = Layout.create_status_bar(self.root)
    
    def save_to_history(self):
        """L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o history"""
        self.history.save(self.current_image)
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t status bar"""
        self.status_label.config(text=message)
        self.root.update_idletasks()
    
    def load_image(self):
        """Ch·ªçn v√† t·∫£i ·∫£nh t·ª´ file"""
        image, file_path = ImageHandler.load_image_from_file()
        
        if image is not None:
            self.original_image = image
            self.current_image = self.original_image.copy()
            self.image_path = file_path
            self.history.clear()
            
            # Hi·ªÉn th·ªã ·∫£nh
            self.display_current_image()
            self.update_status(f"‚úì ƒê√£ t·∫£i ·∫£nh: {file_path.split('/')[-1]}")
    
    def display_current_image(self):
        """Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i l√™n giao di·ªán"""
        if self.current_image is None:
            return
        
        # Chuy·ªÉn ƒë·ªïi sang PhotoImage
        self.display_image = ImageHandler.convert_to_display_image(
            self.current_image,
            max_width=850,
            max_height=650
        )
        
        # C·∫≠p nh·∫≠t label
        self.image_label.configure(image=self.display_image, text="")
        self.image_label.image = self.display_image
    
    def check_image_loaded(self):
        """Ki·ªÉm tra xem ƒë√£ t·∫£i ·∫£nh ch∆∞a"""
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return False
        return True
    
    # === C√ÅC H√ÄM X·ª¨ L√ù L√ÄM M·ªú ===
    
    def apply_average_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung b√¨nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_average_blur(self.current_image, kernel_size=(15, 15))
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung b√¨nh")
    
    def apply_gaussian_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Gaussian"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_gaussian_blur(self.current_image, kernel_size=(15, 15), sigma=3)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Gaussian")
    
    def apply_median_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung v·ªã"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_median_blur(self.current_image, kernel_size=15)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung v·ªã")
    
    def apply_bilateral_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Bilateral"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Blur.apply_bilateral_blur(self.current_image, d=15, sigma_color=80, sigma_space=80)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Bilateral")
    
    # === C√ÅC H√ÄM X·ª¨ L√ù ƒê·ªò S√ÅNG ===
    
    def increase_brightness(self):
        """L√†m s√°ng ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.increase_brightness(self.current_image, value=50)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ l√†m s√°ng ·∫£nh")
    
    def decrease_brightness(self):
        """L√†m t·ªëi ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.decrease_brightness(self.current_image, value=50)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ l√†m t·ªëi ·∫£nh")
    
    def increase_contrast(self):
        """TƒÉng t∆∞∆°ng ph·∫£n"""
        if not self.check_image_loaded():
            return
        
        self.save_to_history()
        self.current_image = Brightness.adjust_contrast_brightness(self.current_image, alpha=1.5, beta=0)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ tƒÉng t∆∞∆°ng ph·∫£n")
    
    # === C√ÅC H√ÄM KH√ÅC ===
    
    def reset_image(self):
        """Kh√¥i ph·ª•c ·∫£nh g·ªëc"""
        if not self.check_image_loaded():
            return
        
        self.history.clear()
        self.current_image = self.original_image.copy()
        self.display_current_image()
        self.update_status("üîÑ ƒê√£ reset v·ªÅ ·∫£nh g·ªëc")
    
    def save_image(self):
        """L∆∞u ·∫£nh ƒë√£ ch·ªânh s·ª≠a"""
        if not self.check_image_loaded():
            return
        
        success, file_path = ImageHandler.save_image_to_file(self.current_image)
        
        if success:
            self.update_status(f"üíæ ƒê√£ l∆∞u ·∫£nh: {file_path.split('/')[-1]}")


def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = ImageEditorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
