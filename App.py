# -*- coding: utf-8 -*-
"""
App.py - ·ª®ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh chuy√™n nghi·ªáp v·ªõi giao di·ªán GUI
C√°c ch·ª©c nƒÉng: 
- L√†m m·ªù & l√†m m·ªãn ·∫£nh
- ƒêi·ªÅu ch·ªânh ƒë·ªô s√°ng, t·ªëi, t∆∞∆°ng ph·∫£n
- L·ªçc & kh·ª≠ nhi·ªÖu
- L√†m r√µ n√©t
- T√¨m ƒë∆∞·ªùng vi·ªÅn
- C√¢n b·∫±ng m√†u s·∫Øc
- Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
- Xoay & l·∫≠t ·∫£nh (M·ªöI!)
- Nh·∫≠n di·ªán v√† l√†m ƒë·∫πp khu√¥n m·∫∑t
"""

import os
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageDraw, ImageTk
from Features import Blur, Brightness, ImageHandler, FaceBeautify, Sharpen, EdgeDetection, Histogram, Morphology, Transform
from UI import Button, Section, Layout, Colors


class ImageEditorApp:
    """Class qu·∫£n l√Ω giao di·ªán ·ª©ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh"""
    
    def __init__(self, root):
        self.root = root
        
        # Thi·∫øt l·∫≠p c·ª≠a s·ªï
        Layout.setup_window(self.root, "·ª®ng D·ª•ng Ch·ªânh S·ª≠a ·∫¢nh - Nh√≥m 4")
        
        # Bi·∫øn l∆∞u tr·ªØ ·∫£nh
        self.original_image = None
        self.current_image = None
        self.display_image = None
        self.image_path = None
        
        # L∆∞u l·ªãch s·ª≠ ƒë·ªÉ undo/redo
        self.history = ImageHandler.ImageHistory()
        self.undo_button = None
        self.redo_button = None
        self.icons = {}

        # Status message
        self.status_message = ""
        
        # Tr·∫°ng th√°i collapse c·ªßa c√°c section
        self.blur_collapsed = True
        self.brightness_collapsed = True
        self.sharpen_collapsed = True
        self.edge_collapsed = True
        self.histogram_collapsed = True
        self.morphology_collapsed = True
        self.transform_collapsed = True
        
        # N·∫°p icon
        self.load_icons()

        # T·∫°o giao di·ªán
        self.create_widgets()
        self.setup_shortcuts()
        self.update_history_controls()

    def load_icons(self):
        """T·∫°o icon l·ªõn cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn."""
        icon_size = 40
        circle_padding = 2
        arrow_margin = 7

        def hex_to_rgb(hex_color):
            hex_color = hex_color.lstrip('#')
            return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

        def get_contrast_color(hex_color):
            r, g, b = hex_to_rgb(hex_color)
            brightness = 0.299 * r + 0.587 * g + 0.114 * b
            return "#102a43" if brightness > 170 else "#ffffff"

        def create_arrow_icon(base_color, direction="left"):
            background_color = Colors.darken_color(base_color, factor=0.85)
            arrow_color = get_contrast_color(base_color)

            img = Image.new("RGBA", (icon_size, icon_size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)

            draw.ellipse(
                (circle_padding, circle_padding, icon_size - circle_padding, icon_size - circle_padding),
                fill=background_color
            )

            center_x = icon_size // 2
            center_y = icon_size // 2
            arrow_width = icon_size - arrow_margin * 2
            arrow_height = icon_size // 2

            if direction == "left":
                points = [
                    (center_x + arrow_width // 2, center_y - arrow_height // 2),
                    (center_x - arrow_width // 6, center_y - arrow_height // 2),
                    (center_x - arrow_width // 6, center_y - arrow_height // 2 - arrow_margin),
                    (center_x - arrow_width // 2 - arrow_margin, center_y),
                    (center_x - arrow_width // 6, center_y + arrow_height // 2 + arrow_margin),
                    (center_x - arrow_width // 6, center_y + arrow_height // 2),
                    (center_x + arrow_width // 2, center_y + arrow_height // 2)
                ]
            else:
                points = [
                    (center_x - arrow_width // 2, center_y - arrow_height // 2),
                    (center_x + arrow_width // 6, center_y - arrow_height // 2),
                    (center_x + arrow_width // 6, center_y - arrow_height // 2 - arrow_margin),
                    (center_x + arrow_width // 2 + arrow_margin, center_y),
                    (center_x + arrow_width // 6, center_y + arrow_height // 2 + arrow_margin),
                    (center_x + arrow_width // 6, center_y + arrow_height // 2),
                    (center_x - arrow_width // 2, center_y + arrow_height // 2)
                ]

            draw.polygon(points, fill=arrow_color)
            return ImageTk.PhotoImage(img)

        undo_color = Colors.get_color('info') or '#118ab2'
        redo_color = Colors.get_color('warning') or '#ffd166'

        self.icons['undo'] = create_arrow_icon(undo_color, direction='left')
        self.icons['redo'] = create_arrow_icon(redo_color, direction='right')

    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        
        # === HEADER ===
        Layout.create_header(self.root)
        
        # === MAIN CONTAINER ===
        main_container = Layout.create_main_container(self.root)
        
        # === LEFT PANEL - Buttons ===
        left_panel = Layout.create_left_panel(main_container)
        
        # T·∫°o scrollable frame cho buttons
        scrollable_frame = Layout.create_scrollable_frame(left_panel)
        
        # === BUTTON CH·ªåN ·∫¢NH ===
        Button.create_button(
            scrollable_frame,
            text="üìÅ Ch·ªçn ·∫¢nh",
            command=self.load_image,
            bg=Colors.get_color('primary'),
            font_size=13,
            bold=True,
            pady_top=15
        )
        
        Section.create_separator(scrollable_frame)
        
        # === NH√ìM L√ÄM M·ªú (COLLAPSIBLE) ===
        self.blur_frame = Section.create_collapsible_section(
            scrollable_frame,
            "L√ÄM M·ªú ·∫¢NH",
            [
                ("L√†m M·ªù Trung B√¨nh", self.apply_average_blur, Colors.get_color('blur_1')),
                ("L√†m M·ªù Gaussian", self.apply_gaussian_blur, Colors.get_color('blur_2')),
                ("L√†m M·ªù Trung V·ªã", self.apply_median_blur, Colors.get_color('blur_3')),
                ("L√†m M·ªù Bilateral", self.apply_bilateral_blur, Colors.get_color('blur_4')),
            ],
            "blur",
            self
        )
        
        # === NH√ìM ƒê·ªò S√ÅNG (COLLAPSIBLE) ===
        self.brightness_frame = Section.create_collapsible_section(
            scrollable_frame,
            "ƒê·ªò S√ÅNG",
            [
                ("L√†m S√°ng ·∫¢nh", self.increase_brightness, Colors.get_color('bright_1')),
                ("L√†m T·ªëi ·∫¢nh", self.decrease_brightness, Colors.get_color('bright_2')),
                ("TƒÉng T∆∞∆°ng Ph·∫£n", self.increase_contrast, Colors.get_color('bright_3')),
            ],
            "brightness",
            self
        )
        
        Section.create_separator(scrollable_frame)
        
        # === NH√ìM L√ÄM R√ï N√âT (COLLAPSIBLE) ===
        self.sharpen_frame = Section.create_collapsible_section(
            scrollable_frame,
            "L√ÄM R√ï N√âT",
            [
                ("L√†m R√µ C∆° B·∫£n", self.apply_basic_sharpen, "#00796b"),
                ("L√†m R√µ M·∫°nh", self.apply_laplacian_sharpen, "#00897b"),
                ("L√†m R√µ Chuy√™n Nghi·ªáp", self.apply_unsharp_mask, "#009688"),
                ("TƒÉng Chi Ti·∫øt", self.apply_detail_enhance, "#26a69a"),
            ],
            "sharpen",
            self
        )
        
        # === NH√ìM PH√ÅT HI·ªÜN BI√äN (COLLAPSIBLE) ===
        self.edge_frame = Section.create_collapsible_section(
            scrollable_frame,
            "T√åM ƒê∆Ø·ªúNG VI·ªÄN",
            [
                ("Vi·ªÅn C∆° B·∫£n (Roberts)", self.apply_roberts_edge, "#5d4037"),
                ("Vi·ªÅn Trung B√¨nh (Prewitt)", self.apply_prewitt_edge, "#6d4c41"),
                ("Vi·ªÅn M·∫°nh (Sobel)", self.apply_sobel_edge, "#795548"),
                ("Vi·ªÅn T·ª± ƒê·ªông (Canny)", self.apply_canny_edge, "#8d6e63"),
            ],
            "edge",
            self
        )
        
        # === NH√ìM HISTOGRAM (COLLAPSIBLE) ===
        self.histogram_frame = Section.create_collapsible_section(
            scrollable_frame,
            "C√ÇN B·∫∞NG M√ÄU S·∫ÆC",
            [
                ("C√¢n B·∫±ng S√°ng T·ªëi", self.apply_histogram_equalization, "#c2185b"),
                ("C√¢n B·∫±ng Th√¥ng Minh", self.apply_clahe, "#d81b60"),
                ("TƒÉng ƒê·ªô T∆∞∆°ng Ph·∫£n", self.apply_histogram_stretching, "#e91e63"),
                ("T·ª± ƒê·ªông L√†m ƒê·∫πp", self.apply_auto_enhance, "#f06292"),
            ],
            "histogram",
            self
        )
        
        # === NH√ìM H√åNH TH√ÅI H·ªåC (COLLAPSIBLE) ===
        self.morphology_frame = Section.create_collapsible_section(
            scrollable_frame,
            "HI·ªÜU ·ª®NG ƒê·∫∂C BI·ªÜT",
            [
                ("L√†m M·ªèng", self.apply_erosion, "#1565c0"),
                ("L√†m D√†y", self.apply_dilation, "#1976d2"),
                ("Lo·∫°i Nhi·ªÖu Nh·ªè", self.apply_opening, "#1e88e5"),
                ("L·∫•p L·ªó H·ªïng", self.apply_closing, "#42a5f5"),
            ],
            "morphology",
            self
        )
        
        # === NH√ìM XOAY & L·∫¨T ·∫¢NH (COLLAPSIBLE) ===
        self.transform_frame = Section.create_collapsible_section(
            scrollable_frame,
            "XOAY & L·∫¨T ·∫¢NH",
            [
                ("Xoay Ph·∫£i 90¬∞", self.rotate_right_90, "#ff6f00"),
                ("Xoay Tr√°i 90¬∞", self.rotate_left_90, "#ff8f00"),
                ("Xoay 180¬∞", self.rotate_180, "#ffa726"),
                ("L·∫≠t Ngang", self.flip_horizontal, "#ffb74d"),
                ("L·∫≠t D·ªçc", self.flip_vertical, "#ffcc80"),
                ("Ph√≥ng To", self.zoom_in_image, "#fb8c00"),
                ("Thu Nh·ªè", self.zoom_out_image, "#f57c00"),
            ],
            "transform",
            self
        )
        
        Section.create_separator(scrollable_frame)
        
        # === NH·∫¨N DI·ªÜN V√Ä L√ÄM ƒê·∫∏P KHU√îN M·∫∂T ===
        Button.create_button(
            scrollable_frame,
            text="üì∏ L√†m ƒê·∫πp T·ª´ ·∫¢nh",
            command=self.open_face_beautify_image,
            bg="#e91e63",
            font_size=11,
            bold=True,
            pady_top=5
        )
        
        Button.create_button(
            scrollable_frame,
            text="üìπ L√†m ƒê·∫πp T·ª´ Camera",
            command=self.open_face_beautify_camera,
            bg="#9c27b0",
            font_size=11,
            bold=True,
            pady_top=5
        )
        
        Section.create_separator(scrollable_frame)
        
        # === N√öT ƒêI·ªÄU KHI·ªÇN ===
        control_frame = Layout.create_control_frame(scrollable_frame)

        button_bar = tk.Frame(control_frame, bg="#16213e")
        button_bar.pack(fill=tk.X, padx=5, pady=4)

        button_bar.grid_columnconfigure(0, weight=1, minsize=50)
        button_bar.grid_columnconfigure(1, weight=1, minsize=50)
        button_bar.grid_columnconfigure(2, weight=1, minsize=50)
        button_bar.grid_columnconfigure(3, weight=1, minsize=50)

        self.undo_button = Button.create_control_button(
            button_bar,
            text="",
            command=self.undo_action,
            bg=Colors.get_color('info'),
            width=12,
            image=self.icons.get('undo'),
            compound='center'
        )
        self.undo_button.grid(row=0, column=0, padx=6, pady=6, sticky="ew")

        self.redo_button = Button.create_control_button(
            button_bar,
            text="",
            command=self.redo_action,
            bg=Colors.get_color('warning'),
            width=12,
            image=self.icons.get('redo'),
            compound='center'
        )
        self.redo_button.grid(row=0, column=1, padx=6, pady=6, sticky="ew")

        self.reset_button = Button.create_control_button(
            button_bar,
            text="üîÑ Reset",
            command=self.reset_image,
            bg=Colors.get_color('danger'),
            width=12
        )
        self.reset_button.grid(row=0, column=2, padx=6, pady=6, sticky="ew")

        self.save_button = Button.create_control_button(
            button_bar,
            text="üíæ L∆∞u",
            command=self.save_image,
            bg=Colors.get_color('success'),
            width=12
        )
        self.save_button.grid(row=0, column=3, padx=6, pady=6, sticky="ew")
        
        # === RIGHT PANEL - Image Display ===
        right_panel = Layout.create_right_panel(main_container)
        
        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = Layout.create_image_label(right_panel)
        
        # === STATUS BAR ===
        self.status_label = Layout.create_status_bar(self.root)
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t status bar"""
        self.status_label.config(text=message)
        self.root.update_idletasks()
    
    def apply_effect(self, operation, status_message, *args, **kwargs):
        """Th·ª±c thi h√†m x·ª≠ l√Ω ·∫£nh v√† c·∫≠p nh·∫≠t UI/l·ªãch s·ª≠."""
        if not self.check_image_loaded():
            return

        try:
            new_image = operation(self.current_image, *args, **kwargs)
        except Exception as error:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ √°p d·ª•ng thao t√°c:\n{error}")
            return

        self.apply_and_update(new_image, status_message)

    def apply_and_update(self, new_image, status_message):
        """C·∫≠p nh·∫≠t ·∫£nh hi·ªán t·∫°i v√† l∆∞u l·ªãch s·ª≠."""
        if new_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c √°p d·ª•ng cho ·∫£nh.")
            return

        self.current_image = new_image
        self.history.push_state(self.current_image)
        self.display_current_image()
        self.update_status(status_message)
        self.update_history_controls()

    def setup_shortcuts(self):
        """ƒêƒÉng k√Ω c√°c ph√≠m t·∫Øt ti·ªán d·ª•ng."""
        self.root.bind("<Control-o>", lambda event: self.load_image())
        self.root.bind("<Control-s>", lambda event: self.save_image())
        self.root.bind("<Control-z>", self.undo_action)
        self.root.bind("<Control-y>", self.redo_action)
        self.root.bind("<Control-Shift-Z>", self.redo_action)
        self.root.bind("<Control-r>", lambda event: self.reset_image())

    def update_history_controls(self):
        """K√≠ch ho·∫°t/v√¥ hi·ªáu c√°c n√∫t t√πy theo tr·∫°ng th√°i l·ªãch s·ª≠."""
        if not all([self.undo_button, self.redo_button, self.reset_button, self.save_button]):
            return

        has_image = self.current_image is not None
        can_undo = len(self.history.undo_stack) > 1
        can_redo = len(self.history.redo_stack) > 0

        self.undo_button.config(state=tk.NORMAL if can_undo else tk.DISABLED)
        self.redo_button.config(state=tk.NORMAL if can_redo else tk.DISABLED)
        self.reset_button.config(state=tk.NORMAL if has_image else tk.DISABLED)
        self.save_button.config(state=tk.NORMAL if has_image else tk.DISABLED)

    def undo_action(self, event=None):
        """Ho√†n t√°c thao t√°c g·∫ßn nh·∫•t."""
        if self.current_image is None:
            return "break"

        previous_image = self.history.undo(self.current_image)

        if previous_image is None:
            self.update_status("‚ö†Ô∏è Kh√¥ng c√≤n b∆∞·ªõc ƒë·ªÉ ho√†n t√°c")
            self.update_history_controls()
            return "break"

        self.current_image = previous_image
        self.display_current_image()
        self.update_status("‚Ü©Ô∏è ƒê√£ ho√†n t√°c")
        self.update_history_controls()
        return "break"

    def redo_action(self, event=None):
        """L√†m l·∫°i thao t√°c ƒë√£ ho√†n t√°c."""
        if self.current_image is None:
            return "break"

        restored_image = self.history.redo()

        if restored_image is None:
            self.update_status("‚ö†Ô∏è Kh√¥ng c√≥ b∆∞·ªõc ƒë·ªÉ l√†m l·∫°i")
            self.update_history_controls()
            return "break"

        self.current_image = restored_image
        self.display_current_image()
        self.update_status("‚Ü™Ô∏è ƒê√£ l√†m l·∫°i")
        self.update_history_controls()
        return "break"
    
    def load_image(self):
        """Ch·ªçn v√† t·∫£i ·∫£nh t·ª´ file"""
        image, file_path = ImageHandler.load_image_from_file()

        if image is not None:
            self.original_image = image
            self.current_image = self.original_image.copy()
            self.image_path = file_path
            self.history.set_initial(self.current_image)

            # Hi·ªÉn th·ªã ·∫£nh
            self.display_current_image()
            filename = os.path.basename(file_path)
            self.update_status(f"‚úì ƒê√£ t·∫£i ·∫£nh: {filename}")
            self.update_history_controls()

    def display_current_image(self):
        """Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i l√™n giao di·ªán"""
        if self.current_image is None:
            return
        
        # Chuy·ªÉn ƒë·ªïi sang PhotoImage
        self.display_image = ImageHandler.convert_to_display_image(
            self.current_image,
            max_width=850,
            max_height=650
        )
        
        # C·∫≠p nh·∫≠t label
        self.image_label.configure(image=self.display_image, text="")
        self.image_label.image = self.display_image
        self.update_history_controls()
    
    def check_image_loaded(self):
        """Ki·ªÉm tra xem ƒë√£ t·∫£i ·∫£nh ch∆∞a"""
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return False
        return True
    
    # === CH·ª®C NƒÇNG NH·∫¨N DI·ªÜN V√Ä L√ÄM ƒê·∫∏P KHU√îN M·∫∂T ===
    
    def open_face_beautify_image(self):
        """M·ªü c·ª≠a s·ªï l√†m ƒë·∫πp t·ª´ ·∫£nh"""
        if not self.check_image_loaded():
            return
        
        try:
            from FaceBeautifyWindow import FaceBeautifyWindow
            FaceBeautifyWindow(self, self.current_image)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï:\n{str(e)}")
    
    def open_face_beautify_camera(self):
        """M·ªü c·ª≠a s·ªï camera nh·∫≠n di·ªán v√† l√†m ƒë·∫πp"""
        try:
            from FaceBeautifyCamera import FaceBeautifyCameraWindow
            FaceBeautifyCameraWindow(self)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï:\n{str(e)}")
    
    # === C√ÅC H√ÄM X·ª¨ L√ù L√ÄM M·ªú ===
    
    def apply_average_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung b√¨nh"""
        self.apply_effect(
            Blur.apply_average_blur,
            "‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung b√¨nh",
            kernel_size=(15, 15)
        )
    
    def apply_gaussian_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Gaussian"""
        self.apply_effect(
            Blur.apply_gaussian_blur,
            "‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Gaussian",
            kernel_size=(15, 15),
            sigma=3
        )
    
    def apply_median_blur(self):
        """√Åp d·ª•ng l√†m m·ªù trung v·ªã"""
        self.apply_effect(
            Blur.apply_median_blur,
            "‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù trung v·ªã",
            kernel_size=15
        )
    
    def apply_bilateral_blur(self):
        """√Åp d·ª•ng l√†m m·ªù Bilateral"""
        self.apply_effect(
            Blur.apply_bilateral_blur,
            "‚úì ƒê√£ √°p d·ª•ng l√†m m·ªù Bilateral",
            d=15,
            sigma_color=80,
            sigma_space=80
        )
    
    # === C√ÅC H√ÄM X·ª¨ L√ù ƒê·ªò S√ÅNG ===
    
    def increase_brightness(self):
        """L√†m s√°ng ·∫£nh"""
        self.apply_effect(
            Brightness.increase_brightness,
            "‚úì ƒê√£ l√†m s√°ng ·∫£nh",
            value=50
        )
    
    def decrease_brightness(self):
        """L√†m t·ªëi ·∫£nh"""
        self.apply_effect(
            Brightness.decrease_brightness,
            "‚úì ƒê√£ l√†m t·ªëi ·∫£nh",
            value=50
        )
    
    def increase_contrast(self):
        """TƒÉng t∆∞∆°ng ph·∫£n"""
        self.apply_effect(
            Brightness.adjust_contrast_brightness,
            "‚úì ƒê√£ tƒÉng t∆∞∆°ng ph·∫£n",
            alpha=1.5,
            beta=0
        )
    
    # === C√ÅC H√ÄM X·ª¨ L√ù L√ÄM R√ï N√âT ===
    
    def apply_basic_sharpen(self):
        """√Åp d·ª•ng l√†m r√µ n√©t c∆° b·∫£n"""
        self.apply_effect(
            Sharpen.sharpen_basic,
            "‚úì ƒê√£ l√†m r√µ n√©t ·∫£nh",
            strength=1.0
        )

    def apply_laplacian_sharpen(self):
        """√Åp d·ª•ng l√†m r√µ n√©t Laplacian"""
        self.apply_effect(
            Sharpen.sharpen_laplacian,
            "‚úì ƒê√£ l√†m r√µ n√©t b·∫±ng Laplacian",
            strength=0.5
        )

    def apply_unsharp_mask(self):
        """√Åp d·ª•ng Unsharp Mask"""
        self.apply_effect(
            Sharpen.unsharp_mask,
            "‚úì ƒê√£ √°p d·ª•ng Unsharp Mask",
            kernel_size=(5, 5),
            sigma=1.0,
            amount=1.5
        )

    def apply_detail_enhance(self):
        """√Åp d·ª•ng tƒÉng c∆∞·ªùng chi ti·∫øt"""
        self.apply_effect(
            Sharpen.detail_enhance,
            "‚úì ƒê√£ tƒÉng c∆∞·ªùng chi ti·∫øt"
        )

    # === C√ÅC H√ÄM X·ª¨ L√ù PH√ÅT HI·ªÜN BI√äN ===

    def apply_roberts_edge(self):
        """√Åp d·ª•ng ph√°t hi·ªán bi√™n Roberts"""
        self.apply_effect(
            EdgeDetection.roberts_edge_detection,
            "‚úì ƒê√£ ph√°t hi·ªán bi√™n b·∫±ng Roberts"
        )

    def apply_prewitt_edge(self):
        """√Åp d·ª•ng ph√°t hi·ªán bi√™n Prewitt"""
        self.apply_effect(
            EdgeDetection.prewitt_edge_detection,
            "‚úì ƒê√£ ph√°t hi·ªán bi√™n b·∫±ng Prewitt"
        )

    def apply_sobel_edge(self):
        """√Åp d·ª•ng ph√°t hi·ªán bi√™n Sobel"""
        self.apply_effect(
            EdgeDetection.sobel_edge_detection,
            "‚úì ƒê√£ ph√°t hi·ªán vi·ªÅn b·∫±ng Sobel",
            ksize=3
        )

    def apply_canny_edge(self):
        """√Åp d·ª•ng ph√°t hi·ªán bi√™n Canny"""
        self.apply_effect(
            EdgeDetection.auto_canny,
            "‚úì ƒê√£ ph√°t hi·ªán vi·ªÅn b·∫±ng Canny"
        )

    # === C√ÅC H√ÄM X·ª¨ L√ù HISTOGRAM ===

    def apply_histogram_equalization(self):
        """√Åp d·ª•ng c√¢n b·∫±ng histogram"""
        self.apply_effect(
            Histogram.histogram_equalization,
            "‚úì ƒê√£ c√¢n b·∫±ng histogram"
        )

    def apply_clahe(self):
        """√Åp d·ª•ng CLAHE"""
        self.apply_effect(
            Histogram.clahe_equalization,
            "‚úì ƒê√£ √°p d·ª•ng CLAHE",
            clip_limit=2.0
        )

    def apply_histogram_stretching(self):
        """√Åp d·ª•ng k√©o gi√£n histogram"""
        self.apply_effect(
            Histogram.histogram_stretching,
            "‚úì ƒê√£ k√©o gi√£n histogram"
        )

    def apply_auto_enhance(self):
        """√Åp d·ª•ng t·ª± ƒë·ªông tƒÉng c∆∞·ªùng"""
        self.apply_effect(
            Histogram.auto_enhance,
            "‚úì ƒê√£ t·ª± ƒë·ªông tƒÉng c∆∞·ªùng ·∫£nh"
        )

    # === C√ÅC H√ÄM X·ª¨ L√ù H√åNH TH√ÅI H·ªåC ===

    def apply_erosion(self):
        """√Åp d·ª•ng ph√©p co (Erosion)"""
        self.apply_effect(
            Morphology.erosion,
            "‚úì ƒê√£ √°p d·ª•ng ph√©p co (Erosion)",
            kernel_size=(3, 3),
            iterations=1
        )

    def apply_dilation(self):
        """√Åp d·ª•ng ph√©p gi√£n (Dilation)"""
        self.apply_effect(
            Morphology.dilation,
            "‚úì ƒê√£ √°p d·ª•ng ph√©p gi√£n (Dilation)",
            kernel_size=(3, 3),
            iterations=1
        )

    def apply_opening(self):
        """√Åp d·ª•ng ph√©p m·ªü (Opening)"""
        self.apply_effect(
            Morphology.opening,
            "‚úì ƒê√£ √°p d·ª•ng ph√©p m·ªü (Opening)",
            kernel_size=(5, 5)
        )

    def apply_closing(self):
        """√Åp d·ª•ng ph√©p ƒë√≥ng (Closing)"""
        self.apply_effect(
            Morphology.closing,
            "‚úì ƒê√£ √°p d·ª•ng ph√©p ƒë√≥ng (Closing)",
            kernel_size=(5, 5)
        )

    # === C√ÅC H√ÄM X·ª¨ L√ù XOAY & L·∫¨T ·∫¢NH ===

    def rotate_right_90(self):
        """Xoay ·∫£nh 90 ƒë·ªô sang ph·∫£i"""
        self.apply_effect(
            Transform.rotate_90_clockwise,
            "‚úì ƒê√£ xoay ·∫£nh 90¬∞ sang ph·∫£i"
        )

    def rotate_left_90(self):
        """Xoay ·∫£nh 90 ƒë·ªô sang tr√°i"""
        self.apply_effect(
            Transform.rotate_90_counterclockwise,
            "‚úì ƒê√£ xoay ·∫£nh 90¬∞ sang tr√°i"
        )

    def rotate_180(self):
        """Xoay ·∫£nh 180 ƒë·ªô"""
        self.apply_effect(
            Transform.rotate_180,
            "‚úì ƒê√£ xoay ·∫£nh 180¬∞"
        )

    def flip_horizontal(self):
        """L·∫≠t ·∫£nh theo chi·ªÅu ngang"""
        self.apply_effect(
            Transform.flip_horizontal,
            "‚úì ƒê√£ l·∫≠t ·∫£nh theo chi·ªÅu ngang"
        )

    def flip_vertical(self):
        """L·∫≠t ·∫£nh theo chi·ªÅu d·ªçc"""
        self.apply_effect(
            Transform.flip_vertical,
            "‚úì ƒê√£ l·∫≠t ·∫£nh theo chi·ªÅu d·ªçc"
        )

    def zoom_in_image(self):
        """Ph√≥ng to ·∫£nh"""
        self.apply_effect(
            Transform.zoom_in,
            "‚úì ƒê√£ ph√≥ng to ·∫£nh",
            zoom_factor=1.3
        )

    def zoom_out_image(self):
        """Thu nh·ªè ·∫£nh"""
        self.apply_effect(
            Transform.zoom_out,
            "‚úì ƒê√£ thu nh·ªè ·∫£nh",
            zoom_factor=0.7
        )
    
    # === C√ÅC H√ÄM KH√ÅC ===
    
    def reset_image(self):
        """Kh√¥i ph·ª•c ·∫£nh g·ªëc"""
        if not self.check_image_loaded():
            return
        
        self.history.clear()
        self.current_image = self.original_image.copy()
        self.display_current_image()
        self.update_status("üîÑ ƒê√£ reset v·ªÅ ·∫£nh g·ªëc")
    
    def save_image(self):
        """L∆∞u ·∫£nh ƒë√£ ch·ªânh s·ª≠a"""
        if not self.check_image_loaded():
            return
        
        success, file_path = ImageHandler.save_image_to_file(self.current_image)
        
        if success:
            self.update_status(f"üíæ ƒê√£ l∆∞u ·∫£nh: {file_path.split('/')[-1]}")


def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng"""
    root = tk.Tk()
    app = ImageEditorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()