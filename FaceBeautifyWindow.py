# -*- coding: utf-8 -*-
"""
FaceBeautifyWindow.py - C·ª≠a s·ªï l√†m ƒë·∫πp khu√¥n m·∫∑t t·ª´ ·∫£nh (kh√¥ng ph·∫£i camera)
Copy file n√†y v√†o: th∆∞ m·ª•c g·ªëc (c√πng c·∫•p v·ªõi App.py)
"""

import tkinter as tk
from tkinter import ttk, messagebox
import cv2
import numpy as np
from PIL import Image, ImageTk
from Features import FaceBeautify


class FaceBeautifyWindow:
    """C·ª≠a s·ªï ri√™ng cho ch·ª©c nƒÉng nh·∫≠n di·ªán v√† l√†m ƒë·∫πp khu√¥n m·∫∑t t·ª´ ·∫£nh"""
    
    def __init__(self, parent, original_image):
        """
        parent: c·ª≠a s·ªï cha (App)
        original_image: ·∫£nh g·ªëc t·ª´ App ch√≠nh
        """
        self.parent = parent
        self.original_image = original_image.copy() if original_image is not None else None
        self.current_image = original_image.copy() if original_image is not None else None
        self.display_image = None
        self.faces = []
        
        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        self.DEFAULT_SMOOTH = 0.5
        self.DEFAULT_BRIGHTNESS = 20
        self.DEFAULT_CONTRAST = 1.2
        
        # T·∫°o c·ª≠a s·ªï m·ªõi
        self.window = tk.Toplevel(parent.root)
        self.window.title("Nh·∫≠n Di·ªán v√† L√†m ƒê·∫πp Khu√¥n M·∫∑t - T·ª´ ·∫¢nh")
        self.window.geometry("1000x700")
        self.window.configure(bg="#f0f0f0")
        
        # Bi·∫øn tr·∫°ng th√°i
        self.smooth_level = tk.DoubleVar(value=self.DEFAULT_SMOOTH)
        self.brightness_value = tk.IntVar(value=self.DEFAULT_BRIGHTNESS)
        self.contrast_value = tk.DoubleVar(value=self.DEFAULT_CONTRAST)
        
        self.create_widgets()
        
        if self.original_image is not None:
            self.detect_faces_auto()
    
    def create_widgets(self):
        """T·∫°o giao di·ªán cho c·ª≠a s·ªï"""
        
        # Header
        header = tk.Frame(self.window, bg="#2c3e50", height=70)
        header.pack(fill=tk.X, side=tk.TOP)
        
        title = tk.Label(
            header,
            text="üë§ NH·∫¨N DI·ªÜN V√Ä L√ÄM ƒê·∫∏P KHU√îN M·∫∂T - T·ª™ ·∫¢NH",
            font=("Arial", 20, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        title.pack(pady=20)
        
        # Main container
        main = tk.Frame(self.window, bg="#f0f0f0")
        main.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Left panel
        left_panel = tk.Frame(main, bg="white", width=280, relief=tk.RAISED, borderwidth=2)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # Scrollable frame
        canvas = tk.Canvas(left_panel, bg="white", highlightthickness=0)
        scrollbar = ttk.Scrollbar(left_panel, orient="vertical", command=canvas.yview)
        scroll_frame = tk.Frame(canvas, bg="white")
        
        scroll_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Bind mouse wheel to scroll
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Buttons
        tk.Label(scroll_frame, text="üîç NH·∫¨N DI·ªÜN", font=("Arial", 12, "bold"),
                bg="white", fg="#2c3e50").pack(pady=(15, 10))
        
        self.create_button(scroll_frame, "Nh·∫≠n Di·ªán Khu√¥n M·∫∑t", 
                          self.detect_faces_manual, "#3498db")
        self.create_button(scroll_frame, "X√≥a Khung Nh·∫≠n Di·ªán", 
                          self.clear_detection, "#e74c3c")
        
        ttk.Separator(scroll_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=15)
        
        tk.Label(scroll_frame, text="‚ú® L√ÄM ƒê·∫∏P T·ª∞ ƒê·ªòNG", font=("Arial", 12, "bold"),
                bg="white", fg="#2c3e50").pack(pady=(5, 10))
        
        self.create_button(scroll_frame, "L√†m ƒê·∫πp T·ª± ƒê·ªông", 
                          self.auto_beautify, "#27ae60")
        
        ttk.Separator(scroll_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=15)
        
        tk.Label(scroll_frame, text="üé® ƒêI·ªÄU CH·ªàNH CHI TI·∫æT", font=("Arial", 12, "bold"),
                bg="white", fg="#2c3e50").pack(pady=(5, 10))
        
        # Sliders
        self.create_slider_control(scroll_frame, "L√†m M·ªãn Da:", 
                                   self.smooth_level, 0.0, 1.0, self.apply_smooth_skin)
        self.create_slider_control(scroll_frame, "ƒê·ªô S√°ng:", 
                                   self.brightness_value, 0, 50, self.apply_brighten, resolution=1)
        self.create_slider_control(scroll_frame, "T∆∞∆°ng Ph·∫£n:", 
                                   self.contrast_value, 1.0, 2.0, self.apply_contrast)
        
        # N√∫t Reset (g·ªôp c·∫£ ·∫£nh v√† gi√° tr·ªã)
        reset_btn = tk.Button(
            scroll_frame, 
            text="üîÑ Reset Gi√° Tr·ªã M·∫∑c ƒê·ªãnh",
            command=self.reset_to_default,
            font=("Arial", 10, "bold"),
            bg="#e74c3c",
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            height=2
        )
        reset_btn.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Separator(scroll_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=15)
        
        tk.Label(scroll_frame, text="üåü HI·ªÜU ·ª®NG", font=("Arial", 12, "bold"),
                bg="white", fg="#2c3e50").pack(pady=(5, 10))
        
        self.create_button(scroll_frame, "L√†m M·ªù N·ªÅn", self.apply_blur_bg, "#9b59b6")
        self.create_button(scroll_frame, "Filter M·ªÅm M·∫°i", self.apply_soft_filter, "#f39c12")
        self.create_button(scroll_frame, "Gi·∫£m T√¨ V·∫øt", self.apply_remove_blemishes, "#1abc9c")
        
        ttk.Separator(scroll_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=15)
        
        # N√∫t √Åp D·ª•ng
        apply_btn = tk.Button(
            scroll_frame,
            text="‚úÖ √Åp D·ª•ng V√†o ·∫¢nh Ch√≠nh",
            command=self.apply_changes,
            font=("Arial", 10, "bold"),
            bg="#27ae60",
            fg="white",
            relief=tk.FLAT,
            cursor="hand2",
            height=2
        )
        apply_btn.pack(fill=tk.X, padx=10, pady=10)
        
        # Right panel
        right_panel = tk.Frame(main, bg="white", relief=tk.RAISED, borderwidth=2)
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.image_label = tk.Label(
            right_panel,
            text="ƒêang ch·ªù x·ª≠ l√Ω...",
            font=("Arial", 14),
            bg="white",
            fg="#95a5a6"
        )
        self.image_label.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)
        
        # Status bar
        status_frame = tk.Frame(self.window, bg="#34495e", height=30)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_label = tk.Label(
            status_frame,
            text="S·∫µn s√†ng",
            font=("Arial", 10),
            bg="#34495e",
            fg="white",
            anchor="w"
        )
        self.status_label.pack(side=tk.LEFT, padx=15, pady=5)
    
    def create_button(self, parent, text, command, color):
        btn = tk.Button(parent, text=text, command=command, font=("Arial", 10),
                       bg=color, fg="white", relief=tk.FLAT, cursor="hand2", height=2)
        btn.pack(fill=tk.X, padx=10, pady=5)
        return btn
    
    def create_control_button(self, parent, text, command, color):
        btn = tk.Button(parent, text=text, command=command, font=("Arial", 10, "bold"),
                       bg=color, fg="white", relief=tk.FLAT, cursor="hand2", width=12)
        return btn
    
    def create_slider_control(self, parent, label_text, variable, from_, to, command, resolution=0.1):
        frame = tk.Frame(parent, bg="white")
        frame.pack(fill=tk.X, padx=10, pady=8)
        
        label = tk.Label(frame, text=label_text, font=("Arial", 9),
                        bg="white", fg="#2c3e50")
        label.pack(anchor="w")
        
        slider = ttk.Scale(frame, from_=from_, to=to, variable=variable,
                          orient=tk.HORIZONTAL, command=lambda v: command())
        slider.pack(fill=tk.X, pady=5)
        
        value_label = tk.Label(frame, textvariable=variable, font=("Arial", 8),
                              bg="white", fg="#7f8c8d")
        value_label.pack(anchor="e")
        
        return slider
    
    def update_status(self, message):
        self.status_label.config(text=message)
        self.window.update_idletasks()
    
    def display_current_image(self):
        if self.current_image is None:
            return
        
        image_rgb = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2RGB)
        h, w = image_rgb.shape[:2]
        
        max_width, max_height = 700, 550
        aspect = w / h
        
        if w > max_width or h > max_height:
            if aspect > 1:
                new_w = max_width
                new_h = int(max_width / aspect)
            else:
                new_h = max_height
                new_w = int(max_height * aspect)
            image_rgb = cv2.resize(image_rgb, (new_w, new_h))
        
        pil_image = Image.fromarray(image_rgb)
        self.display_image = ImageTk.PhotoImage(pil_image)
        
        self.image_label.configure(image=self.display_image, text="")
        self.image_label.image = self.display_image
    
    def check_image(self):
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ x·ª≠ l√Ω!")
            return False
        return True
    
    def check_faces_detected(self):
        if len(self.faces) == 0:
            messagebox.showwarning("C·∫£nh b√°o", 
                                 "Ch∆∞a nh·∫≠n di·ªán khu√¥n m·∫∑t!\nVui l√≤ng nh·∫•n 'Nh·∫≠n Di·ªán Khu√¥n M·∫∑t' tr∆∞·ªõc.")
            return False
        return True
    
    def detect_faces_auto(self):
        if not self.check_image():
            return
        
        self.faces = FaceBeautify.detect_faces(self.current_image)
        
        if len(self.faces) > 0:
            self.current_image = FaceBeautify.draw_face_rectangles(self.current_image, self.faces)
            self.display_current_image()
            self.update_status(f"‚úì ƒê√£ t√¨m th·∫•y {len(self.faces)} khu√¥n m·∫∑t")
        else:
            self.display_current_image()
            self.update_status("‚ö† Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t n√†o")
    
    def detect_faces_manual(self):
        if not self.check_image():
            return
        
        self.current_image = self.original_image.copy()
        self.faces = FaceBeautify.detect_faces(self.current_image)
        
        if len(self.faces) > 0:
            self.current_image = FaceBeautify.draw_face_rectangles(self.current_image, self.faces)
            self.display_current_image()
            self.update_status(f"‚úì ƒê√£ t√¨m th·∫•y {len(self.faces)} khu√¥n m·∫∑t")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t√¨m th·∫•y {len(self.faces)} khu√¥n m·∫∑t!")
        else:
            self.display_current_image()
            self.update_status("‚ö† Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t")
            messagebox.showwarning("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t n√†o trong ·∫£nh!")
    
    def clear_detection(self):
        if not self.check_image():
            return
        
        self.current_image = self.original_image.copy()
        self.faces = []
        self.display_current_image()
        self.update_status("ƒê√£ x√≥a khung nh·∫≠n di·ªán")
    
    def auto_beautify(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.beautify_face_auto(self.current_image, self.faces)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m ƒë·∫πp t·ª± ƒë·ªông")
    
    def apply_smooth_skin(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.smooth_skin(self.current_image, self.faces, 
                                                      smooth_level=self.smooth_level.get())
        self.display_current_image()
        self.update_status(f"‚úì L√†m m·ªãn da: {self.smooth_level.get():.2f}")
    
    def apply_brighten(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.brighten_face(self.current_image, self.faces, 
                                                        brightness_value=self.brightness_value.get())
        self.display_current_image()
        self.update_status(f"‚úì ƒê·ªô s√°ng: {self.brightness_value.get()}")
    
    def apply_contrast(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.enhance_face_contrast(self.current_image, self.faces, 
                                                                contrast=self.contrast_value.get())
        self.display_current_image()
        self.update_status(f"‚úì T∆∞∆°ng ph·∫£n: {self.contrast_value.get():.2f}")
    
    def apply_blur_bg(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.apply_blur_background(self.current_image, self.faces)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ l√†m m·ªù n·ªÅn")
    
    def apply_soft_filter(self):
        if not self.check_image():
            return
        
        # Copy t·ª´ ·∫£nh g·ªëc ƒë·ªÉ x√≥a khung nh·∫≠n di·ªán
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.add_soft_filter(self.current_image, intensity=0.3)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ √°p d·ª•ng filter m·ªÅm m·∫°i")
    
    def apply_remove_blemishes(self):
        if not self.check_image() or not self.check_faces_detected():
            return
        
        self.current_image = self.original_image.copy()
        self.current_image = FaceBeautify.remove_blemishes(self.current_image, self.faces)
        self.display_current_image()
        self.update_status("‚úì ƒê√£ gi·∫£m t√¨ v·∫øt")
    
    def reset_to_default(self):
        """Reset ·∫£nh v·ªÅ g·ªëc v√† c√°c gi√° tr·ªã v·ªÅ m·∫∑c ƒë·ªãnh (gi·ªØ l·∫°i k·∫øt qu·∫£ nh·∫≠n di·ªán)"""
        if not self.check_image():
            return
        
        # Reset ·∫£nh v·ªÅ g·ªëc
        self.current_image = self.original_image.copy()
        
        # Gi·ªØ l·∫°i k·∫øt qu·∫£ nh·∫≠n di·ªán (self.faces), v·∫Ω l·∫°i khung n·∫øu c√≥
        if len(self.faces) > 0:
            self.current_image = FaceBeautify.draw_face_rectangles(self.current_image, self.faces)
        
        # Reset gi√° tr·ªã slider
        self.smooth_level.set(self.DEFAULT_SMOOTH)
        self.brightness_value.set(self.DEFAULT_BRIGHTNESS)
        self.contrast_value.set(self.DEFAULT_CONTRAST)
        
        self.display_current_image()
        self.update_status(f"üîÑ ƒê√£ reset v·ªÅ ·∫£nh g·ªëc v√† gi√° tr·ªã m·∫∑c ƒë·ªãnh (gi·ªØ {len(self.faces)} khu√¥n m·∫∑t ƒë√£ nh·∫≠n di·ªán)")
    

    def apply_changes(self):
        if not self.check_image():
            return
        
        result = messagebox.askyesno(
            "X√°c nh·∫≠n",
            "√Åp d·ª•ng c√°c thay ƒë·ªïi v√†o ·∫£nh ch√≠nh?\n(·∫¢nh trong c·ª≠a s·ªï ch√≠nh s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t)"
        )
        
        if result:
            self.parent.current_image = self.current_image.copy()
            self.parent.display_current_image()
            self.parent.update_status("‚úì ƒê√£ √°p d·ª•ng l√†m ƒë·∫πp khu√¥n m·∫∑t")
            
            self.update_status("‚úÖ ƒê√£ √°p d·ª•ng v√†o ·∫£nh ch√≠nh")
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng c√°c thay ƒë·ªïi v√†o ·∫£nh ch√≠nh!")
            
            self.window.destroy()